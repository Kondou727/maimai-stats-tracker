// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: scores.sql

package database

import (
	"context"
)

const createScore = `-- name: CreateScore :one
INSERT INTO scores (song_name, chart_type, difficulty, achievement, genre, level)
VALUES (
    ?, ?, ?, ?, ?, ?
)
ON CONFLICT(song_name, difficulty) DO UPDATE SET
    achievement = excluded.achievement
RETURNING song_name, chart_type, difficulty, achievement, genre, level
`

type CreateScoreParams struct {
	SongName    string
	ChartType   int64
	Difficulty  int64
	Achievement float64
	Genre       string
	Level       float64
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, createScore,
		arg.SongName,
		arg.ChartType,
		arg.Difficulty,
		arg.Achievement,
		arg.Genre,
		arg.Level,
	)
	var i Score
	err := row.Scan(
		&i.SongName,
		&i.ChartType,
		&i.Difficulty,
		&i.Achievement,
		&i.Genre,
		&i.Level,
	)
	return i, err
}
