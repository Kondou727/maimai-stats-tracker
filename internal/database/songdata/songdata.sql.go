// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: songdata.sql

package songdatadb

import (
	"context"
	"database/sql"
)

const createSong = `-- name: CreateSong :exec
INSERT INTO songdata (artist, catcode, image_url, release, lev_bas, lev_adv, lev_exp, lev_mas, sort, title, title_kana, version, lev_remas, dx_lev_bas, dx_lev_adv, dx_lev_exp, dx_lev_mas, dx_lev_remas, date, lev_utage, kanji, comment, buddy)
VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
ON CONFLICT (artist, title) DO NOTHING
`

type CreateSongParams struct {
	Artist     string
	Catcode    string
	ImageUrl   string
	Release    string
	LevBas     sql.NullString
	LevAdv     sql.NullString
	LevExp     sql.NullString
	LevMas     sql.NullString
	Sort       string
	Title      string
	TitleKana  string
	Version    string
	LevRemas   sql.NullString
	DxLevBas   sql.NullString
	DxLevAdv   sql.NullString
	DxLevExp   sql.NullString
	DxLevMas   sql.NullString
	DxLevRemas sql.NullString
	Date       sql.NullString
	LevUtage   sql.NullString
	Kanji      sql.NullString
	Comment    sql.NullString
	Buddy      sql.NullString
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) error {
	_, err := q.db.ExecContext(ctx, createSong,
		arg.Artist,
		arg.Catcode,
		arg.ImageUrl,
		arg.Release,
		arg.LevBas,
		arg.LevAdv,
		arg.LevExp,
		arg.LevMas,
		arg.Sort,
		arg.Title,
		arg.TitleKana,
		arg.Version,
		arg.LevRemas,
		arg.DxLevBas,
		arg.DxLevAdv,
		arg.DxLevExp,
		arg.DxLevMas,
		arg.DxLevRemas,
		arg.Date,
		arg.LevUtage,
		arg.Kanji,
		arg.Comment,
		arg.Buddy,
	)
	return err
}
